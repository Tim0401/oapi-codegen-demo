// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVTU8USxT9K5P7WDYzA4/k5fUOUQkxMUTdGMKi6L7MFJn6oKra0JJOYEhc+RUSRXZo",
	"jCbGhXFhSDD8mR4Q/4Wp6p6PnmkGEONqqqrvvXXuqXPubEIgmBQcudHgb4JCLQXX6DbzaBYMsnvZLhDc",
	"IDd2SaRs0YAYKnhtTQtuz3TQREbsSiohURmapVGDzP5OKFwFH/6p9S+sZTm65mKSxAOF6xFVGIK/lCUu",
	"e2BiieCDWFnDwEBiw0LUgaLS3g/+IMzE6+709VEXFxfj70ElSpG4tB99lYZcC/Zrfs0gm8WEtP0ubb9P",
	"d56kOwfgDbVSCB2Xefbp8+mb59ADqI2ivGH7oqHNHDnmhOH4kicvn5XVk4oGJZmd47enB9/BA0Y5ZRED",
	"v95LptxgA9UoqyHkQLplLcPUtFySZWuYcA82JrURskUbTacL2x204v9WoumN/wlbNyR7FI1BpKiJ71v6",
	"My5nI9MUij4mXTapxd1EEqLq4vCHovqykPQOxrb/QsDkbMjoJYvlsSMlLVzKV4V7prx5IZETSasxa4EH",
	"j1DpjOWpat1iyD+DD/9W69W6pY+Ypuuy1hN9A834B+4cbp19+Ji2d09evD453ku399Lt43R7H9wFyoFe",
	"CAc07e5RhKFBpcFfGi6e1Tl99QW8jI/1CFXcp2PCCAnegG/HamXZK0606Xr9PC/34moj9osYIyoGHx6K",
	"SFXmbz2oIA+loNyKyZCGHrC3VbfQF7CWtnc7h1udo28/9o9+Pv16PmuLQvdos6pHbW6IML7SYLvE4M1M",
	"VeBparSDOYXEYAiD3nAvOOSKpWXL+zAviZfrqrZJwySr3kLjxkCx6ZvufCHz7hCsmVFYd0VlLudiPLKu",
	"0Sy+xOtqu1SmcA3d5P9DM+VYTeW2iHj4e8IqGsfZw5q27w43Dfvj0agIB71S5g8ZldCwGPVp+Juq+1PP",
	"WyK/JPkVAAD//7kz+tDsCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
