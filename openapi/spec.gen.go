// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7yVz0scSxDH/5Wl3juOu6tPeLy5+UwiIiRCcgmyh3am3G3Z6W67a4ITGdAVcsovPMR4",
	"MyEkEHLKIQgG/5lZjfkvQvfM/pzNaoLkNMNsV/W3PvWt2h0IZKSkQEEG/B0wQQsj5l45YWSfIZpAc0Vc",
	"CvAh67zNOu+y/SfZ/jF4oLRUqImjKR2dFnn58dPF6+fgASUKwQdDmosmpB7w0EaWPgsW4fSU5y+fTcqn",
	"NA8mRHbP3lwcfwUPIi54FEfg1/vBXBA2UUOaeqBxK+YaQ/DXrLRCSC9twwPi1HZBllY/hVzfxIDAg+0Z",
	"Q1K1ebNFjmkIPrSTf9fjue3/WLRFDFJ7jcEg1pyS+xZ/znIhppbU/DHr0eRWdwtZiLqnwx871b+fKb6C",
	"ia1/5MDMQhjxayYrzpZSWrlcbEjXpqJ4qVAwxatJ1AYPHqE2OeXZat1qKH4GH/6p1qt1i49Ry1VZs9zc",
	"WxNpeoO7J7uX7z9knYPzF6/Ozw6zvcNs7yzbOwJ3gXaily3fJaRll9W2zygpTE50rl63j0AKQuEuY0q1",
	"eeAia5smx5xPgH0b9XZf6FUKwRuc/VvjBvjwV20wZbVixFzllk6Pr9YsKXvOZWqMG8t1YVTIvRUXbOIo",
	"YjoBHx7KWFeWbj+ooAiV5MLakVjTDKW18yHNFdyzzkH3ZLd7+uXb0en3p59/zn1VmiHwWzEa+l+GyS8x",
	"vxpYmiMa6etsuYJFjYwwhOHpAn+tNFdrjbRR5pJ6hTNrOzxM8+xtJLdIRou+5b4v59M/Jmu+LOuurCwW",
	"LKYr642q1Zd6vemYaPSb9/k1O1G26rWd6sH8ZDxUuSNjEf6el5lmERJq43i6HWc3zWDDuRU+EE06Rm+I",
	"xNi/h3WGiieAX40H4P+kz2/KUBMMn6Y/AgAA//+WbNYlCwgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
