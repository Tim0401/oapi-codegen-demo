// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVTU8UTRD+K5t6OQ67Cy/Jm3duiEqIiSHqxRAOzUyx22T7g+4ew0gmgSXx5FdIFLmh",
	"MZoYD8aDIcHwZ2ZB/Beme2Y/ZnZZQIynnempqn7qqeep3YRAMCk4cqPB3wSFWgqu0b3Mo1kwyO5lb4Hg",
	"Brmxj0TKFg2IoYLX1rTg9kwHTWTEPkklJCpDszRqkNnfCYWr4MM/tf6FtSxH11xMknigcD2iCkPwl7LE",
	"ZQ9MLBF8ECtrGBhIbFiIOlBU2vvBH4SZeN03fX3UxYeL8fegEqVIPLIffZWGXAv2a37NIJvFhLT9Lm2/",
	"T3eepDsH4JVaKYSOyzz79Pn0zXPoAdRGUd6wfdHQZg4dc8JwfMmTl89G1ZOKBiMyO8dvTw++gweMcsoi",
	"Bn69l0y5wQaqYVZDyIF0y1qGqWm5JMtWmXAPNia1EbJFG02nC9sdtOL/VqLpjf8JWzckG4rGIFLUxPct",
	"/RmXs5FpCkUfky6b1OJuIglRdXH4pai+LCS9g7HtvxAwORsyeslieexQSQuX8lXhxpQ3LyRyImk1Zi3w",
	"4BEqnbE8Va1bDPln8OHfar1at/QR03Rd1nqib6AZP+DO4dbZh49pe/fkxeuT4710ey/dPk6398FdoBzo",
	"hXBA0+4eRRgaVBr8pXLxrM7pqy/gZXysR6jiPh0TRkjwBnw7VivLXnGjTdfr53m5F1cbsl/EGFEx+PBQ",
	"RKoyf+tBBXkoBeVWTIY09IC9rbqFvoC1tL3bOdzqHH37sX/08+nX81lbFLpHm1U9anNDhPGVFtslFm9m",
	"qgJPU8MdzCkkBkMY9IabYMkVS8uW9zIviZfrqrZJwySr3kLj1kCx6ZvufCHzbgnWzDCsu6Iyl3MxHlnX",
	"aBZf4nW1PVKmcA3d5P9DM6OxmsptEfHw94RVNI6zhzVt3x1uG/bXo1ERDnqltIjtmGQ0goXFqM/C3xTd",
	"n5ruCPUlya8AAAD//wfe9uLrCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
