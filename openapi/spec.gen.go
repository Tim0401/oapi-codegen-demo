// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVXWsTQRT9K+Hax22S1oK4b7VqKQUt6IuUPEx3b5Mp2ZnpzF3pWhbaFHzyi4LWvlUR",
	"BfFBfJBCpX9m01r/hczsJmk+TKsUn7Js5p4595xz725CICMlBQoy4G+CCRoYMffICSP7G6IJNFfEpQAf",
	"stb7rPUh23ma7RyAB0pLhZo4mqGj4yrPPn85ffsCPKBEIfhgSHNRh9QDHtrKodeCRTge8uTV81F4SvNg",
	"RGX7+N3pwQ/wIOKCR3EEfrVbzAVhHTWkqQca12OuMQR/2VIriHRgax4Qp6Yrsmp1IeTKGgYEHmxMGpKq",
	"yesNcpqG4EMzubEST2/cZNE6MUjtNQaDWHNKHlj5cy1nY2pIzZ+wjprc8m4gC1F3ePgDp7r3M8UXMbH9",
	"9x2YnA0jfkmw4uwQpKXLxap0NhXNS4WCKV5OoiZ48Bi1yVWeKlcth+Jv8OF6uVquWvkYNVyXFaube6oj",
	"jTe4fbh19vFT1to9efnm5Hgv297Lto+z7X1wF2hHesHqO4+04FDtPZpFSKgN+MuD4DnO6euv4OV6rMeo",
	"k54cEyQVeMVIWG5js1KzYTFKCpP7N12t2p9ACkLhWmNKNXngeFbWTG5qD7x/krqyXKSH5d45O6FxFXy4",
	"VunNdKUYaKez9aLjptYsGU64Q6oNxth53k/k/qIrNnEUMZ2AD49krEvzdx6WUIRKcmHDT6xuzsHaaZTm",
	"Apez1m77cKt99P3n/tGvZ9/+7PKSNF2bbQ9o6JYMk7/S/GLB0lyiPl+nhjuY08gIQzg/yy5xA1O8XLM5",
	"GdQl9Yo5qGzyMM3Rm0hubfU3fdu9X8h3zQCtmWFa92RprtBiPLPOYrD8Uq8ziyPHCq4855d0Yjiql06q",
	"BzOj5aHSXRmL8N+y3L9b3Aaxe623QNwHo0eadIzn18nAt8omQ8UjhF+Ke8L/z5xfVaBGBD5NfwcAAP//",
	"AgnhvXkIAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
