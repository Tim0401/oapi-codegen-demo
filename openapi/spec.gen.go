// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVXU8TTRT+K815uVzawkti3DtEJURjiHpjCBfD7qEd0p0ZZs4aVrIJlMQrv0KiyB0a",
	"o4nxwnhhSDD8mS2I/8LMbr+2XVoQE6+6s3s+nvOc55lugicDJQUKMuBugkajpDCYHuaRFgiD+9nJk4JQ",
	"kH1kSjW4x4hLUVkzUth3xqtjwOyT0lKhJp6lccLA/k5oXAUX/qv0GlayHFNJY+LYAY3rIdfog7uUJS47",
	"QJFCcEGurKFHENswH42nubL9we2HGTudk7k66vzDePxdqExrFhXOYy4zUDqC/dpu089mPiFpvk+aH5Kd",
	"p8nOATgDo+RCR2Weff5y+vYFOBBwcRdFjergTnXhGtJc1OyU3Ld1xgQJFuDodievno/vpTT3Cuq0jt+d",
	"HvzI0nkQBuBWu8lcENZQD/PvQxtWp6zdBadGmmR5HVyNAxuThqRq8Fo9VZCdHBrRtZVweuM6C9aJZesz",
	"6IWaU/TALipjfTakutT8Cevwzi3uOjIfdQeHOxDVE5DidzCy8+cCJmf9gF+wWDt2qKSFy8WqtFU6w0uF",
	"gilejoIGOPAYtclYnipXLYb2Z3Dh/3K1XLX0MaqnU1a69qghjV5363Dr7OOnpLl78vLNyfFesr2XbB8n",
	"2/uQNtAp6AW/T/1pH80CJNQG3KXB4lmd09dfwcn4WA9RRz06JkgqcPocPlIry07+7puuVs9zfTeuMmTU",
	"MAiYjsCFRzLUpflbD0sofCW5sGIiVjN9F4FVtzRjWEuau63DrdbR95/7R7+efTuftUVpurRZ1aOhG9KP",
	"LnUFXuCKznmKdIjxEG9TwxPNaWSEPvR7Jd3ogEuWlu0eBnmKnbbOKpvcj7PqDaT0WsiTcDN9v5B5eQDW",
	"zDCse7I01+ZmNLKO8Sy+2OlovVC2cAUdtf/BZoqxUum2DIX/Z0LLGym1izVxzy3p7Zhfbb93ivyiwgIa",
	"FsMeDf9ShX9r3QVyjOPfAQAA///87OZ6NgkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
